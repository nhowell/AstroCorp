{
	"root": true,
	"extends": [
		// By extending from a plugin config, we can get recommended rules without having to add them manually.
		"eslint:recommended",
		"plugin:react/recommended",
		"plugin:react/jsx-runtime",
		"plugin:react-hooks/recommended",
		"plugin:import/recommended",
		"plugin:import/typescript",
		"plugin:jsx-a11y/recommended",
		"plugin:@typescript-eslint/recommended",
		"plugin:promise/recommended",
		"plugin:testing-library/react",
		"plugin:vitest/recommended",
		// This disables the formatting rules in ESLint that Prettier is going to be responsible for handling.
		// Make sure it's always the last config, so it gets the chance to override other configs.
		"plugin:prettier/recommended"
	],
	"settings": {
		"react": {
			// Tells eslint-plugin-react to automatically detect the version of React to use.
			"version": "detect"
		},
		// Tells eslint how to resolve imports
		"import/resolver": {
			"typescript": true,
			"node": {
				"paths": ["src"],
				"extensions": [".js", ".jsx", ".ts", ".tsx"]
			}
		}
	},
	"rules": {
		// Add your own rules here to override ones from the extended configs.

		// Don't like this one because it causes extended interfaces that only use Pick<>, for example, to be reported as a problem.
		"@typescript-eslint/no-empty-interface": "off",

		// Doesn't work correctly with deeply nested exports, like FormikHelpers.
		"import/named": "off",

		// Doesn't work correctly with some react-three-fiber properties.
		"react/no-unknown-property": [
			"error",
			{ "ignore": ["args", "attach", "intensity", "position"] }
		]
	}
}
